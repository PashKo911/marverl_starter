{"version":3,"file":"static/js/224.2a6b689e.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img\n\t\t\tstyle={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\n\t\t\tsrc={img}\n\t\t\talt=\"Error\"\n\t\t/>\n\t)\n}\n\nexport default ErrorMessage\n","import { useEffect, useState } from 'react'\n\nimport useMarvelService from '../../services/MarvelService'\nimport setContent from '../../utils/setContent'\n\nimport './randomChar.scss'\nimport mjolnir from '../../resources/img/mjolnir.png'\n\nconst RandomChar = () => {\n\tconst [char, setChar] = useState({})\n\n\tconst { getCharacter, clearError, process, setProcess } = useMarvelService()\n\n\tuseEffect(() => {\n\t\tupdateChar()\n\t\t// const timerId = setInterval(updateChar, 5000)\n\n\t\treturn () => {\n\t\t\t// clearInterval(timerId)\n\t\t}\n\t}, [])\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char)\n\t}\n\n\tconst updateChar = () => {\n\t\tclearError()\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n\t\tgetCharacter(id)\n\t\t\t.then(onCharLoaded)\n\t\t\t.then(() => setProcess('confirmed'))\n\t}\n\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{setContent(process, View, char)}\n\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!\n\t\t\t\t\t<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">Or choose another one</p>\n\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst View = ({ data }) => {\n\tconst { name, description, thumbnail, homepage, wiki } = data\n\tlet imgStyle = { objectFit: 'cover' }\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { objectFit: 'contain' }\n\t}\n\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\" />\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">{description}</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default RandomChar\n","import { useState, useEffect, useRef, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { v4 as uuidv4 } from 'uuid'\nimport useMarvelService from '../../services/MarvelService'\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nimport './charList.scss'\n\nconst setContent = (process, Component, newItemLoading) => {\n\tswitch (process) {\n\t\tcase 'waiting':\n\t\t\treturn <Spinner />\n\t\tcase 'loading':\n\t\t\treturn newItemLoading ? <Component /> : <Spinner />\n\t\tcase 'confirmed':\n\t\t\treturn <Component />\n\t\tcase 'error':\n\t\t\treturn <ErrorMessage />\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected process state')\n\t}\n}\n\nconst CharList = (props) => {\n\tconst [charList, setCharList] = useState([])\n\tconst [newItemLoading, setNewItemLoading] = useState(false)\n\tconst [offset, setOffset] = useState(210)\n\tconst [charEnded, setCharEnded] = useState(false)\n\n\tconst { getAllCharacters, process, setProcess } = useMarvelService()\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true)\n\t}, [])\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true)\n\t\tgetAllCharacters(offset)\n\t\t\t.then(onCharListLoaded)\n\t\t\t.then(() => setProcess('confirmed'))\n\t}\n\n\tconst onCharListLoaded = (newCharList) => {\n\t\tlet ended = false\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true\n\t\t}\n\t\tsetCharList((charList) => [...charList, ...newCharList])\n\t\tsetNewItemLoading((newItemLoading) => false)\n\t\tsetOffset((offset) => offset + 9)\n\t\tsetCharEnded((charEnded) => ended)\n\t}\n\n\tconst itemRefs = useRef([])\n\n\tconst focusOnItem = (id) => {\n\t\titemRefs.current.forEach((item) => item.classList.remove('char__item_selected'))\n\t\titemRefs.current[id].classList.add('char__item_selected')\n\t\titemRefs.current[id].focus()\n\t}\n\n\tfunction renderItems(arr) {\n\t\tconst items = arr.map((item, i) => {\n\t\t\tlet imgStyle = { objectFit: 'cover' }\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\timgStyle = { objectFit: 'unset' }\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\ttabIndex={0}\n\t\t\t\t\tref={(el) => (itemRefs.current[i] = el)}\n\t\t\t\t\tkey={uuidv4()}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.onCharSelected(item.id)\n\t\t\t\t\t\tfocusOnItem(i)\n\t\t\t\t\t}}\n\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\tif (e.key === ' ' || e.key === 'Enter') {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id)\n\t\t\t\t\t\t\tfocusOnItem(i)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}>\n\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle} />\n\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t</li>\n\t\t\t)\n\t\t})\n\n\t\treturn <ul className=\"char__grid\">{items}</ul>\n\t}\n\n\tconst elements = useMemo(() => {\n\t\treturn setContent(process, () => renderItems(charList), newItemLoading)\n\t}, [process])\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{elements}\n\t\t\t<button\n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{ display: charEnded ? 'none' : 'block' }}\n\t\t\t\tonClick={() => onRequest(offset)}>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList\n","import { useEffect, useState } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport useMarvelService from '../../services/MarvelService'\nimport setContent from '../../utils/setContent'\n\nimport './charInfo.scss'\n\nconst CharInfo = (props) => {\n\tconst [char, setChar] = useState(null)\n\n\tconst { getCharacter, clearError, process, setProcess } = useMarvelService()\n\n\tuseEffect(() => {\n\t\tupdateChar()\n\t}, [props.charId])\n\n\tconst updateChar = () => {\n\t\tconst { charId } = props\n\n\t\tif (!charId) return\n\n\t\tclearError()\n\n\t\tgetCharacter(charId)\n\t\t\t.then(onCharLoaded)\n\t\t\t.then(() => setProcess('confirmed'))\n\t}\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char)\n\t}\n\n\treturn <div className=\"char__info\">{setContent(process, View, char)}</div>\n}\n\nconst View = ({ data }) => {\n\tconst { name, desctiption, thumbnail, homepage, wiki, comics } = data\n\n\tlet imgStyle = { objectFit: 'cover' }\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { objectFit: 'unset' }\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"char__basics\">\n\t\t\t\t<img src={thumbnail} alt={name} style={imgStyle} />\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\n\t\t\t\t\t<div className=\"char__btns\">\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"char__descr\">{desctiption}</div>\n\t\t\t<div className=\"char__comics\">Comics:</div>\n\t\t\t<ul className=\"char__comics-list\">\n\t\t\t\t{comics.length > 0 ? null : 'There is no comics with this character'}\n\t\t\t\t{comics.map((item, i) => {\n\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\tif (i > 9) return\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={i} className=\"char__comics-item\">\n\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\nCharInfo.propTypes = {\n\tcharId: PropTypes.number,\n}\n\nexport default CharInfo\n","import { Component } from 'react'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nclass ErrorBoundary extends Component {\n\tstate = { error: false }\n\n\tcomponentDidCatch(error, errorInfo) {\n\t\tconsole.log(error, errorInfo)\n\n\t\tthis.setState({\n\t\t\terror: true,\n\t\t})\n\t}\n\n\trender() {\n\t\tif (this.state.error) {\n\t\t\treturn <ErrorMessage />\n\t\t}\n\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary\n","import { useState } from 'react'\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik'\nimport { object, string } from 'yup'\nimport { Link } from 'react-router-dom'\n\nimport useMarvelService from '../../services/MarvelService'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nimport './charSearchForm.scss'\n\nconst CharSearchForm = () => {\n\tconst [char, setChar] = useState(null)\n\tconst { getCharacterByName, clearError, process, setProcess } = useMarvelService()\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char)\n\t}\n\n\tconst updateChar = (name) => {\n\t\tclearError()\n\n\t\tgetCharacterByName(name)\n\t\t\t.then(onCharLoaded)\n\t\t\t.then(() => setProcess('confirmed'))\n\t}\n\n\tconst errorMessage =\n\t\tprocess === 'error' ? (\n\t\t\t<div className=\"char__search-critical-error\">\n\t\t\t\t<ErrorMessage />\n\t\t\t</div>\n\t\t) : null\n\tconst results = !char ? null : char.length > 0 ? (\n\t\t<div className=\"char__search-wrapper\">\n\t\t\t<div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n\t\t\t\t<div className=\"inner\">To page</div>\n\t\t\t</Link>\n\t\t</div>\n\t) : (\n\t\t<div className=\"char__search-error\">The character was not found. Check the name and try again</div>\n\t)\n\n\treturn (\n\t\t<div className=\"char__search-form\">\n\t\t\t<Formik\n\t\t\t\tinitialValues={{\n\t\t\t\t\tcharName: '',\n\t\t\t\t}}\n\t\t\t\tvalidationSchema={object({\n\t\t\t\t\tcharName: string().required('This field is required'),\n\t\t\t\t})}\n\t\t\t\tonSubmit={({ charName }) => {\n\t\t\t\t\tupdateChar(charName)\n\t\t\t\t}}>\n\t\t\t\t<Form>\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor=\"charName\">\n\t\t\t\t\t\tOr find a character by name:\n\t\t\t\t\t</label>\n\t\t\t\t\t<div className=\"char__search-wrapper\">\n\t\t\t\t\t\t<Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\n\t\t\t\t\t\t<button type=\"submit\" className=\"button button__main\" disabled={process === 'loading'}>\n\t\t\t\t\t\t\t<div className=\"inner\">find</div>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n\t\t\t\t</Form>\n\t\t\t</Formik>\n\t\t\t{results}\n\t\t\t{errorMessage}\n\t\t</div>\n\t)\n}\n\nexport default CharSearchForm\n","import { useState } from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport RandomChar from '../randomChar/RandomChar'\nimport CharList from '../charList/CharList'\nimport CharInfo from '../charInfo/CharInfo'\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary'\nimport CharSearchForm from '../charSearchForm/CharSearchForm'\nimport decoration from '../../resources/img/vision.png'\n\nconst MainPage = () => {\n\tconst [selectedChar, setChar] = useState()\n\n\tconst onCharSelected = (id) => {\n\t\tsetChar(id)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Helmet>\n\t\t\t\t<meta name=\"description\" content=\"Marvel information portal\" />\n\t\t\t\t<title>Marvel information portal</title>\n\t\t\t</Helmet>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<RandomChar />\n\t\t\t</ErrorBoundary>\n\t\t\t<div className=\"char__content\">\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\n\t\t\t\t</ErrorBoundary>\n\t\t\t\t<div>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CharSearchForm />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n\t\t</>\n\t)\n}\n\nexport default MainPage\n","import { useState, useCallback } from 'react'\n\nexport const useHttp = () => {\n\tconst [process, setProcess] = useState('waiting')\n\n\tconst request = useCallback(\n\t\tasync (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url, { method, body, headers })\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json()\n\n\t\t\t\tsetProcess('confirmed')\n\t\t\t\treturn data\n\t\t\t} catch (e) {\n\t\t\t\tsetProcess('error')\n\t\t\t\tthrow e\n\t\t\t}\n\t\t},\n\t\t[]\n\t)\n\n\tconst clearError = useCallback(() => {\n\t\tsetProcess('loading')\n\t}, [])\n\n\treturn { request, clearError, process, setProcess }\n}\n","import { useHttp } from '../hooks/http.hook'\n\nconst useMarvelService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp()\n\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/'\n\tconst _apiKey = 'apikey=93f100f32a709b185b53e61657e81944'\n\tconst _baseOffset = 210\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\n\t\treturn res.data.results.map(_transformCharacter)\n\t}\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n\t\treturn res.data.results.map(_transformCharacter)\n\t}\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\n\t\treturn _transformCharacter(res.data.results[0])\n\t}\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n\t\treturn res.data.results.map(_transformComics)\n\t}\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n\t\treturn _transformComics(res.data.results[0])\n\t}\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: 'There is no description for this character',\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t}\n\t}\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || 'There is no description',\n\t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || 'en-us',\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n\t\t}\n\t}\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetAllCharacters,\n\t\tgetCharacter,\n\t\tgetCharacterByName,\n\t\tgetAllComics,\n\t\tgetComic,\n\t}\n}\n\nexport default useMarvelService\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner'\nimport ErrorMessage from '../components/errorMessage/ErrorMessage'\nimport Skeleton from '../components/skeleton/Skeleton'\n\nconst setContent = (process, Component, data) => {\n\tswitch (process) {\n\t\tcase 'waiting':\n\t\t\treturn <Skeleton />\n\t\tcase 'loading':\n\t\t\treturn <Spinner />\n\t\tcase 'confirmed':\n\t\t\treturn <Component data={data} />\n\t\tcase 'error':\n\t\t\treturn <ErrorMessage />\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected process state')\n\t}\n}\n\nexport default setContent\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","uuidv4","renderItems","disabled","desctiption","comics","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","getCharacterByName","errorMessage","results","Link","to","concat","Formik","initialValues","charName","validationSchema","object","string","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}