{"version":3,"file":"static/js/156.7b21625a.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss'\nimport avengers from '../../resources/img/Avengers.png'\nimport avengersLogo from '../../resources/img/Avengers_logo.png'\n\nconst AppBanner = () => {\n\treturn (\n\t\t<div className=\"app__banner\">\n\t\t\t<img src={avengers} alt=\"Avengers\" />\n\t\t\t<div className=\"app__banner-text\">\n\t\t\t\tNew comics every week!\n\t\t\t\t<br />\n\t\t\t\tStay tuned!\n\t\t\t</div>\n\t\t\t<img src={avengersLogo} alt=\"Avengers logo\" />\n\t\t</div>\n\t)\n}\n\nexport default AppBanner\n","import img from './error.gif'\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img\n\t\t\tstyle={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\n\t\t\tsrc={img}\n\t\t\talt=\"Error\"\n\t\t/>\n\t)\n}\n\nexport default ErrorMessage\n","import { useParams } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\n\nimport useMarvelService from '../../services/MarvelService'\n\nimport AppBanner from '../appBanner/AppBanner'\nimport setContent from '../../utils/setContent'\n\nconst SinglePage = ({ Component, dataType }) => {\n\tconst { id } = useParams()\n\tconst [data, setData] = useState(null)\n\tconst { getComic, getCharacter, clearError, process, setProcess } = useMarvelService()\n\n\tuseEffect(() => {\n\t\tupdateData()\n\t}, [id])\n\n\tconst updateData = () => {\n\t\tclearError()\n\n\t\tswitch (dataType) {\n\t\t\tcase 'comic':\n\t\t\t\tgetComic(id)\n\t\t\t\t\t.then(onDataLoaded)\n\t\t\t\t\t.then(() => setProcess('confirmed'))\n\t\t\t\tbreak\n\t\t\tcase 'character':\n\t\t\t\tgetCharacter(id)\n\t\t\t\t\t.then(onDataLoaded)\n\t\t\t\t\t.then(() => setProcess('confirmed'))\n\t\t}\n\t}\n\n\tconst onDataLoaded = (data) => {\n\t\tsetData(data)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<AppBanner />\n\t\t\t{setContent(process, Component, data)}\n\t\t</>\n\t)\n}\n\nexport default SinglePage\n","import { useState, useCallback } from 'react'\n\nexport const useHttp = () => {\n\tconst [process, setProcess] = useState('waiting')\n\n\tconst request = useCallback(\n\t\tasync (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url, { method, body, headers })\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json()\n\n\t\t\t\tsetProcess('confirmed')\n\t\t\t\treturn data\n\t\t\t} catch (e) {\n\t\t\t\tsetProcess('error')\n\t\t\t\tthrow e\n\t\t\t}\n\t\t},\n\t\t[]\n\t)\n\n\tconst clearError = useCallback(() => {\n\t\tsetProcess('loading')\n\t}, [])\n\n\treturn { request, clearError, process, setProcess }\n}\n","import { useHttp } from '../hooks/http.hook'\n\nconst useMarvelService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp()\n\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/'\n\tconst _apiKey = 'apikey=93f100f32a709b185b53e61657e81944'\n\tconst _baseOffset = 210\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\n\t\treturn res.data.results.map(_transformCharacter)\n\t}\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n\t\treturn res.data.results.map(_transformCharacter)\n\t}\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\n\t\treturn _transformCharacter(res.data.results[0])\n\t}\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n\t\treturn res.data.results.map(_transformComics)\n\t}\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n\t\treturn _transformComics(res.data.results[0])\n\t}\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: 'There is no description for this character',\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t}\n\t}\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || 'There is no description',\n\t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || 'en-us',\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n\t\t}\n\t}\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetAllCharacters,\n\t\tgetCharacter,\n\t\tgetCharacterByName,\n\t\tgetAllComics,\n\t\tgetComic,\n\t}\n}\n\nexport default useMarvelService\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner'\nimport ErrorMessage from '../components/errorMessage/ErrorMessage'\nimport Skeleton from '../components/skeleton/Skeleton'\n\nconst setContent = (process, Component, data) => {\n\tswitch (process) {\n\t\tcase 'waiting':\n\t\t\treturn <Skeleton />\n\t\tcase 'loading':\n\t\t\treturn <Spinner />\n\t\tcase 'confirmed':\n\t\t\treturn <Component data={data} />\n\t\tcase 'error':\n\t\t\treturn <ErrorMessage />\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected process state')\n\t}\n}\n\nexport default setContent\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getCharacterByName","getAllComics","Skeleton","Spinner"],"sourceRoot":""}